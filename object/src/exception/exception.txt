exception(예외)

1. 프로그램 오류
1) 컴파일 에러 : 컴파일 시 발생하는 에러
   ==> 컴파일러가 동작하기 때문에 코드 작성 시 바로 발견됨
2) 런타임 에러 : 런타임 시 발생하는 에러
   ==> 실행 시 발생하는 예외, 실행 후 발견
   1) 에러 : 메모리 부족 / 스택오버플로우 같은 복구하기 어려운 에러
   2) 예외 : 수습할 수 있는 상황
3) 논리적 에러 : 실행은 되는데, 의도와는 다르게 동작하기


예외 클래스
    Object
      |
  Throwable
      |
Exception or Error
    |
RunTimeException.....


예외 처리 : exception 발생 시 프로그램이 비정상 종료가 되기 때문에 정상적인 실행상태 유지
1) try ~ catch
2) try ~ finally
3) try ~ catch ~ finally
=> try 문만 올 수 없음. finally or catch 랑 함께 와야함

try : 예외가 발생할 수 있는 코드 구문 작성
catch : 예외 발생 시 무엇을 할 것인지 작성
   - catch (ArithmeticException | NumberFormatException e) {} //multi catch
   - catch (ArrayIndexOutOfBoundsException e) {} catch (ArithmeticException e) {}
finally : 예외 여부와 상관없이 무조건 수행되어야 할 구문 작성
   - 자원(sc.close()) 닫기

1) Cheked Exception(컴파일 시 예외 체크)
    throw new Exception()
1) UnCheked Exception(런타임 시 예외 체크) //요즘 추세, 발생시키고 try catch 할지 말지
    throw new RunTimeException()


e.printStackTrace();
// 오류가 나는 모든 시점을 찍어줘라
// 개발 할때 확인하기 위해
// 개발이 끝난 다음에 바꾸기
System.out.println(e.getMessage());
// 적절한 메세지 출력
throw new Exception(); : 강제 예외 발생
   quick fix 해결 방법 2개
   1) try ~ catch 구문 변경
   2) add throw declaration 으로 호출하는 곳에 오류 던지기

** 정의된 exception 외에도 내가 지정할 수 있음
