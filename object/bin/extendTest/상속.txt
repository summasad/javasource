-클래스 상속
기존의 클래스를 재사용하여 새로운 클래스 작성
코드의 재사용성 높아지고, 중복을 제거할 수 있다

-상속이 되는 것들
1) 멤버 상속
2) 메소드 상속

-상속 되지 않는 것들
1) 생성자
2) 초기화 블럭

-자손 클래스의 멤버 개수는 조상 클래스보다 항상 많거나 같다
-범위를 얘기할 때 자손 클래스가 항상 더 크다

-받을 수 있는 상속은 단일 상속만 가능, 부모는 하나만
class A extends B{}

-상속의 상속 가능

-부모 클래스는 자식 클래스 복수로 가질 수 있음.

부모 클래스 = 조상 클래스, 상위(super) 클래스, 기반(base) 클래스
자손 클래스 = 자식, 하위(sub), 파생된(derived) 클래스


- 클래스간의 관계
1) 상속관계
2) 포함관계

원은 점이다.(is a 관계, 상속) : Circle extends Point
원은 점을 가지고 있다. (has a, 포함, 클래스 호출)
class Circle{
    Point p = new Point();
}

원은 도형이다 => True (상속관계)

어떤 카테고리로 묶을 수 있는 클래스 집단 생성 => 공통의 속성 뽑아서 부모 클래스 생성 후 파생

오버로딩 : 하나의 클래스에 생성자가 여러 개 존재하거나, 메소드가 여러개 존재
오버라이딩 @Override 어노테이션 사용 (오버로딩과 구분할 것)
: 상속에서 나오는 개념.
   자식 클래스에서 부모 클래스의 메소드를 재정의 하는 것
   부모 클래스에서 파생하지만 속성 변주 필요할 때

모든 클래스의 조상 : Object 클래스.
- 모든 클래스의 상속 계층도의 최상위에 위치
- 자동으로 상속받는다
- ex) toString(), equals(), ... 11개 정도

**추상(abstract) 클래스
- 클래스 : 완성 설계도
- 추상 클래스 : 미완성 설계도 (메소드를 추상으로 처리)
- 추상 메소드가 들어오면 무조건 추상 클래스
- 멤버변수, 일반 메소드도 선언 가능

**추상 메소드
  abstract void method();
  - 중괄호가 없음. 입력하는 내용을 정의하지 않아야 메소드를 추상으로 내림
  - 어떤 기능을 수행할 목적으로 작성된 것인지에 대한 정보만 제공
  - 하위 클래스에서 반드시 메소드를 구현해야 한다. 반드시 오버라이드해야 상속
  - 하위 클래스의 메소드를 강제하고 싶을 때 사용

추상과 구체화 개념
 추상 : 개별의 구체적 표상이나 개념에서 공통의 성질을 뽑아 일반적인 개념으로 파악
 추상화 : 클래스 간의 공통점을 찾아내서 공통의 조상을 만드는 작업
 구체화 : 상속을 통해 클래스를 구현, 확정하는 작업
  